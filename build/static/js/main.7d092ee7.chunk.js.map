{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Navigation/Navigation.js","components/ClickCard/ClickCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","id","children","Navigation","href","score","highScore","ClickCard","onClick","markCard","pData","alt","src","image","App","state","pic","guess","updatePic","_this","map","u","clicked","setState","resetGame","shuffleCards","length","console","log","clearPic","i","shufflePic","slice","picIndex","randomIndex","tempPic","Math","floor","random","_this2","this","components_Wrapper_Wrapper","components_Navigation_Navigation","p","components_ClickCard_ClickCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d092ee7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Wapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrap\" id=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Navigation.css\";\r\n\r\nconst Navigation = (props) => (\r\n    <nav className=\"nav-style\">\r\n    <div>\r\n        <h1 className=\"nav1\">\r\n            <a href=\"/\">THE CLICK MASTER</a>\r\n        </h1>\r\n        <h6 className=\"nav1\">Click Once, But Don't Click Twice!</h6>\r\n    </div>\r\n    <div>\r\n        <h6 className=\"nav2\">\r\n            &emsp; \r\n            Score: {props.score} |\r\n            Top Score: {props.highScore} \r\n            &emsp;\r\n            </h6>\r\n    </div>\r\n    </nav>\r\n);\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport \"./ClickCard.css\";\r\nimport \"../../pic.json\";\r\n\r\nconst ClickCard = (props) => (\r\n    <span className=\"clicked\" onClick={() => props.markCard(props.pData.id)}>\r\n    <div className=\"card\">\r\n        <div className=\"img-container\">\r\n            <img alt=\"GameOThrones\" src={props.pData.image}/>\r\n\r\n        </div>\r\n    </div>\r\n    </span>\r\n);\r\n\r\nexport default ClickCard;\r\n","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Navigation from \"./components/Navigation\";\nimport ClickCard from \"./components/ClickCard\";\nimport pic from \"./pic.json\";\n\nclass App extends Component {\n  state ={\n    pic: pic,\n    score: 0,\n    highScore: 0,\n    guess: \"\"\n  };\n\n  markCard = (id) => {\n    const updatePic = this.state.pic.map(u => {\n      if(u.id === id){\n        if(u.clicked === true){\n          this.setState({guess: \"OH NO! YOU CLICKED TWICE\"});\n          this.resetGame();\n          this.shuffleCards();\n          return u;\n        }\n        this.setState({\n          score: this.state.score +1\n        });\n        if(this.state.score === this.state.highScore){\n          this.setState({\n            highScore: this.state.highScore +1\n          });\n        }\n        if((this.state.score +1)===this.state.pic.length){\n          this.setState({guess:\"YOU WON!\"});\n          this.resetGame();\n          this.shuffleCards();\n          return u;\n        } else {\n          this.setState({guess:\"GOOD CLICK!\"});\n        }\n        console.log(this.state.score);\n        console.log(this.state.highScore);\n        u.clicked = true;\n      }\n      return u;\n    })\n    this.setState({\n      pic: updatePic,\n    });\n    this.shuffleCards();\n  }\n\n  resetGame = () => {\n    const clearPic = this.state.pic.map(i => {\n      i.clicked = false;\n      return i;\n    });\n    this.setState({\n      score: 0,\n      pic: clearPic,\n    });\n  }\n\n  shuffleCards = () => {\n    const shufflePic = this.state.pic.slice();\n    let picIndex = this.state.pic.length;\n    let randomIndex = 0;\n    let tempPic = {};\n    while(picIndex) {\n      randomIndex = Math.floor(Math.random()* picIndex--);\n      tempPic=shufflePic[picIndex];\n      shufflePic[picIndex] = shufflePic[randomIndex];\n      shufflePic[randomIndex] = tempPic;\n    }\n    this.setState({\n      pic: shufflePic,\n    });\n  }\n\n  render() {\n    return (\n      <Wrapper id=\"wrapper\">\n        <Navigation\n          score={this.state.score}\n          highScore={this.state.highScore}\n          guess={this.state.guess}\n          />\n        <div>\n          {this.state.pic.map(p =>(\n            <ClickCard\n              pData={p}\n              key={p.id}\n              markCard={this.markCard}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}